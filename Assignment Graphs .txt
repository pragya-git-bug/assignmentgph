Assignment Graphs 

Answer1
package graph1Assignment;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Queue;

//A class to store a graph edge
class Edge {
	int source, dest;

	public Edge(int source, int dest) {
		this.source = source;
		this.dest = dest;
	}
}

//A class to represent a graph object
class Graph {
	// A list of lists to represent an adjacency list
	List<List<Integer>> adjList = null;

	// Total number of nodes in the graph
	int n;

	// Constructor
	Graph(List<Edge> edges, int n) {
		this.adjList = new ArrayList<>();
		this.n = n;

		for (int i = 0; i < n; i++) {
			adjList.add(new ArrayList<>());
		}

		// add edges to the undirected graph
		for (Edge edge : edges) {
			int src = edge.source;
			int dest = edge.dest;

			// add an edge from source to destination
			adjList.get(src).add(dest);

			// add an edge from destination to source
			adjList.get(dest).add(src);
		}
	}
}

public class Q1 {
	/*
	 * Q1. Given an undirected graph, check if it is bipartite or not. A bipartite
	 * graph (or bigraph) is a graph whose vertices can be divided into two disjoint
	 * sets U and V such that every edge connects a vertex in U to one in V
	 */
	
	
	// Perform BFS on the graph starting from vertex `v`
	public static boolean isBipartite(Graph graph) {
		// get total number of nodes in the graph
		int n = graph.n;

		// start from any node as the graph is connected and undirected
		int v = 0;

		// to keep track of whether a vertex is discovered or not
		boolean[] discovered = new boolean[n];

		// stores the level of each vertex in BFS
		int[] level = new int[n];

		// mark the source vertex as discovered and
		// set its level to 0
		discovered[v] = true;
		level[v] = 0;

		// create a queue to do BFS and enqueue
		// source vertex in it
		Queue<Integer> q = new ArrayDeque<>();
		q.add(v);

		// loop till queue is empty
		while (!q.isEmpty()) {
			// dequeue front node and print it
			v = q.poll();

			// do for every edge (v, u)
			for (int u : graph.adjList.get(v)) {
				// if vertex `u` is explored for the first time
				if (!discovered[u]) {
					// mark it as discovered
					discovered[u] = true;

					// set level one more than the level of the parent node
					level[u] = level[v] + 1;

					// enqueue vertex
					q.add(u);
				}
				// if the vertex has already been discovered and the
				// level of vertex `u` and `v` are the same, then the
				// graph contains an odd-cycle and is not bipartite
				else if (level[v] == level[u]) {
					return false;
				}
			}
		}

		return true;
	}

	public static void main(String[] args) {
		// List of graph edges
		List<Edge> edges = Arrays.asList(new Edge(0, 1), new Edge(1, 2), new Edge(1, 7), new Edge(2, 3), new Edge(3, 5),
				new Edge(4, 6), new Edge(4, 8), new Edge(7, 8)
		// if we add edge (1, 3), the graph becomes non-bipartite
		);

		// total number of nodes in the graph (0 to 8)
		int n = 9;

		// build a graph from the given edges
		Graph graph = new Graph(edges, n);

		if (isBipartite(graph)) {
			System.out.println("Graph is bipartite");
		} else {
			System.out.println("Graph is not bipartite");
		}
	}
}

Answer2
package graph1Assignment;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Q2 {
	/*
	 * Q2. Given a list of departure and arrival airports, find the itinerary in
	 * order. It may be assumed that departure is scheduled from every airport
	 * except the final destination, and each airport is visited only once, i.e.,
	 * there are no cycles in the route. For example, Input: HKG —> DXB FRA —> HKG
	 * DEL —> FRA Output: DEL —> FRA —> HKG —> DXB
	 * 
	 * Input: LAX —> DXB DFW —> JFK LHR —> DFW JFK —> LAX Output: LHR —> DFW —> JFK
	 * —> LAX —> DXB
	 */

	// Function to print the itinerary starting from a given source `src`
	private static void printItinerary(Map<String, String> map, String src, int flag) {
		String dest = map.get(src);
		if (dest == null) {
			return;
		}

		if (flag == 0)
			System.out.print(src + " —> " + dest);
		else
			System.out.print(" —> " + dest);
		printItinerary(map, dest, 1);
	}

	// Function to find the itinerary from the given list of departure
	// and arrival airports
	private static void findItinerary(String[][] input) {
		// construct a map from the given list of tickets (departure —> arrival)
		Map<String, String> tickets = Stream.of(input).collect(Collectors.toMap(p -> p[0], p -> p[1]));

		// construct a set of destination airports
		Set<String> destinations = new HashSet<>(tickets.values());

		// consider each departure airport to find the source airport
		for (String airport : tickets.keySet()) {
			// source airport will not be present in the list of destination airports
			if (!destinations.contains(airport)) {
				// when the source airport is found, print the itinerary
				printItinerary(tickets, airport, 0);
				return;
			}
		}
	}

	public static void main(String[] args) {
		// input: list of tickets
		String[][] input = new String[][] { { "LAX", "DXB" }, { "DFW", "JFK" }, { "LHR", "DFW" }, { "JFK", "LAX" } };

		findItinerary(input);
	}
}

Answer3
package graph1Assignment;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Queue;

//A class to store a graph edge
class Edge1 {
	public final int source, dest;

	private Edge1(int source, int dest) {
		this.source = source;
		this.dest = dest;
	}

	// Factory method for creating an immutable instance of `Edge`
	public static Edge1 of(int a, int b) {
		return new Edge1(a, b); // calls private constructor
	}
}

//A class to represent a graph object
class Graph1 {
	// A list of lists to represent an adjacency list
	List<List<Integer>> adjList = null;

	// Constructor
	Graph1(List<Edge1> edges, int n) {
		adjList = new ArrayList<>();

		for (int i = 0; i < n; i++) {
			adjList.add(new ArrayList<>());
		}

		// add edges to the directed graph
		for (Edge1 edge : edges) {
			adjList.get(edge.source).add(edge.dest);
		}
	}
}

public class Q3 {
	/*
	 * Q3. Given a directed graph and two vertices (say source and destination
	 * vertex), determine if the destination vertex is reachable from the source
	 * vertex or not. If a path exists from the source vertex to the destination
	 * vertex, print it.
	 */

	// Function to perform BFS traversal from a given source vertex in a graph to
	// determine if a destination vertex is reachable from the source or not
	public static boolean isReachable(Graph1 graph, int src, int dest) {
		// get the total number of nodes in the graph
		int n = graph.adjList.size();

		// to keep track of whether a vertex is discovered or not
		boolean[] discovered = new boolean[n];

		// create a queue for doing BFS
		Queue<Integer> q = new ArrayDeque<>();

		// mark the source vertex as discovered
		discovered[src] = true;

		// enqueue source vertex
		q.add(src);

		// loop till queue is empty
		while (!q.isEmpty()) {
			// dequeue front node and print it
			int v = q.poll();

			// if destination vertex is found
			if (v == dest) {
				return true;
			}

			// do for every edge (v, u)
			for (int u : graph.adjList.get(v)) {
				if (!discovered[u]) {
					// mark it as discovered and enqueue it
					discovered[u] = true;
					q.add(u);
				}
			}
		}

		return false;
	}

	public static void main(String[] args) {
		// List of graph edges as per the above diagram
		List<Edge1> edges = Arrays.asList(Edge1.of(0, 3), Edge1.of(1, 0), Edge1.of(1, 2), Edge1.of(1, 4), Edge1.of(2, 7),
				Edge1.of(3, 4), Edge1.of(3, 5), Edge1.of(4, 3), Edge1.of(4, 6), Edge1.of(5, 6), Edge1.of(6, 7));

		// total number of nodes in the graph (labeled from 0 to 7)
		int n = 8;

		// build a graph from the given edges
		Graph1 graph = new Graph1(edges, n);

		// source and destination vertex
		int src = 0, dest = 7;

		// perform BFS traversal from the source vertex to check the connectivity
		if (isReachable(graph, src, dest)) {
			System.out.println("Path exists from vertex " + src + " to vertex " + dest);
		} else {
			System.out.println("No path exists between vertices " + src + " and " + dest);
		}
	}
}

Answer4
package graph1Assignment;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

//A class to store a graph edge
class Edge2
{
 int source, dest;

 public Edge2(int source, int dest)
 {
     this.source = source;
     this.dest = dest;
 }
}

//A class to represent a graph object
class Graph2
{
 // A list of lists to represent an adjacency list
 List<List<Integer>> adjList = null;

 // Constructor
 Graph2(List<Edge2> edges, int n)
 {
     adjList = new ArrayList<>();

     for (int i = 0; i < n; i++) {
         adjList.add(new ArrayList<>());
     }

     // add edges to the directed graph
     for (Edge2 edge: edges) {
         adjList.get(edge.source).add(edge.dest);
     }
 }
}
public class Q4 {
	/*
	 * Q4. Given a Graph22, find the arrival and departure time of its vertices in
	 * DFS. The arrival time is the time at which the vertex was explored for the
	 * first time in the DFS, and departure time is the time at which we have
	 * explored all the neighbors of the vertex, and we are ready to backtrack.
	 */

	// Function to perform DFS traversal on the graph on a graph
    public static int DFS(Graph2 graph, int v, boolean[] discovered,
                    int[] arrival, int[] departure, int time)
    {
        // set the arrival time of vertex `v`
        arrival[v] = ++time;
 
        // mark vertex as discovered
        discovered[v] = true;
 
        for (int i: graph.adjList.get(v))
        {
            if (!discovered[i]) {
                time = DFS(graph, i, discovered, arrival, departure, time);
            }
        }
 
        // set departure time of vertex `v`
        departure[v] = ++time;
 
        return time;
    }
 
    public static void main(String[] args)
    {
        // List of graph edges as per the above diagram
        List<Edge2> edges = Arrays.asList(
                new Edge2(0, 1), new Edge2(0, 2), new Edge2(2, 3), new Edge2(2, 4),
                new Edge2(3, 1), new Edge2(3, 5), new Edge2(4, 5), new Edge2(6, 7)
        );
 
        // total number of nodes in the graph (labelled from 0 to 7)
        int n = 8;
 
        // build a graph from the given edges
        Graph2 graph = new Graph2(edges, n);
 
        // array to store the arrival time of vertex
        int[] arrival = new int[n];
 
        // array to store the departure time of vertex
        int[] departure = new int[n];
 
        // mark all the vertices as not discovered
        boolean[] discovered = new boolean[n];
        int time = -1;
 
        // Perform DFS traversal from all undiscovered nodes to
        // cover all unconnected components of a graph
        for (int i = 0; i < n; i++)
        {
            if (!discovered[i]) {
                time = DFS(graph, i, discovered, arrival, departure, time);
            }
        }
 
        // print arrival and departure time of each vertex in DFS
        for (int i = 0; i < n; i++)
        {
            System.out.println("Vertex " + i + " (" + arrival[i] + ", " +
                departure[i] + ")");
        }
    }
}

Answer5
package graph1Assignment;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

//A class to store a graph edge
class Edge3 {
	int source, dest;

	public Edge3(int source, int dest) {
		this.source = source;
		this.dest = dest;
	}
}

//A class to represent a graph object
class Graph3 {
	// A list of lists to represent an adjacency list
	List<List<Integer>> adjList;

	// Constructor
	Graph3(List<Edge3> edges, int n) {
		adjList = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adjList.add(new ArrayList<>());
		}

		// add edges to the directed graph
		for (Edge3 edge : edges) {
			adjList.get(edge.source).add(edge.dest);
		}
	}
}

public class Q5 {
	/*
	 * Q5. A root vertex of a directed graph is a vertex u with a directed path from
	 * u to v for every pair of vertices (u, v) in the graph. In other words, all
	 * other vertices in the graph can be reached from the root vertex. A graph can
	 * have multiple root vertices. For example, each vertex in a strongly connected
	 * component is a root vertex. In such cases, the solution should return anyone
	 * of them. If the graph has no root vertices, the solution should return -1.
	 */

	// Utility function to perform DFS traversal on the graph
    public static void DFS(Graph3 graph, int v, boolean[] discovered)
    {
        // mark the current node as discovered
        discovered[v] = true;
 
        // do for every edge (v, u)
        for (int u: graph.adjList.get(v))
        {
            // `u` is not discovered
            if (!discovered[u]) {
                DFS(graph, u, discovered);
            }
        }
    }
 
    // Function to find the root vertex of a graph
    public static int findRootVertex(Graph3 graph, int n)
    {
        // to keep track of all previously visited vertices in DFS
        boolean[] visited = new boolean[n];
 
        // find the last starting vertex `v` in DFS
        int v = 0;
        for (int i = 0; i < n; i++)
        {
            if (!visited[i])
            {
                DFS(graph, i, visited);
                v = i;
            }
        }
 
        // reset the visited vertices
        Arrays.fill(visited, false);
 
        // perform DFS on the graph from the last starting vertex `v`
        DFS(graph, v, visited);
 
        // return -1 if all vertices are not reachable from vertex `v`
        for (int i = 0; i < n; i++)
        {
            if (!visited[i]) {
                return -1;
            }
        }
 
        // we reach here only if `v` is a root vertex
        return v;
    }
 
    public static void main(String[] args)
    {
        // List of graph edges as per the above diagram
		List<Edge3> edges = Arrays.asList(new Edge3(0, 1), new Edge3(1, 2), new Edge3(2, 3), new Edge3(3, 0),
				new Edge3(4, 3), new Edge3(4, 5), new Edge3(5, 0));

		// total number of nodes in the graph (0 to 5)
		int n = 6;

		// build a directed graph from the given edges
		Graph3 graph = new Graph3(edges, n);
 
        // find the root vertex in the graph
        int root = findRootVertex(graph, n);
 
        if (root != -1) {
            System.out.println("The root vertex is " + root);
        }
        else {
            System.out.println("The root vertex does not exist");
        }
    }
}
